# Nome do fluxo de trabalho que aparecerá na aba "Actions" do GitHub
name: CI/CD Pipeline - Agente de IA

# Define quando este fluxo de trabalho deve ser acionado
on:
  push:
    branches: [ main ] # Aciona em pushes para a branch 'main'
  pull_request:
    branches: [ main ] # Aciona em pull requests para a branch 'main'

# Define os "trabalhos" (jobs) a serem executados
jobs:
  # O único trabalho neste pipeline se chama "build-and-test"
  build-and-test:
    # A máquina virtual que o GitHub fornecerá para rodar nosso job
    runs-on: ubuntu-latest

    # Os passos que compõem o job
    steps:
      # 1. Baixa o código do seu repositório para a máquina virtual
      - name: Checkout do Repositório
        uses: actions/checkout@v3

      # 2. Configura o ambiente Python na versão 3.9
      - name: Configurar Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # 3. Instala as dependências do projeto
      - name: Instalar Dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # 4. Executa os testes automatizados com pytest
      # Este passo garante a qualidade do código antes de prosseguir
      - name: Rodar Testes com Pytest
        run: |
          pytest tests/

      # 5. Simula o "build" da imagem Docker
      # Em um pipeline real, aqui você faria o push da imagem para um registro
      # como o Docker Hub ou AWS ECR.
      - name: Simular Build da Imagem Docker
        run: |
          echo "Simulando o build da imagem Docker..."
          docker build . --file Dockerfile --tag meu-agente-ia:latest
          echo "Build simulado com sucesso!"

      # 6. Simulação de Deploy (opcional)
      # Este passo simula a implantação da aplicação.
      - name: Simular Deploy
        run: |
          echo "Iniciando deploy simulado..."
          echo "Aplicação empacotada e pronta para ser implantada em um servidor."
          echo "Deploy simulado concluído."